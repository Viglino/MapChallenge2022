function e(e){return e&&e.__esModule?e.default:e}var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},i={},r={},n=t.parcelRequirecc54;null==n&&((n=function(e){if(e in i)return i[e].exports;if(e in r){var t=r[e];delete r[e];var n={id:e,exports:{}};return i[e]=n,t.call(n.exports,n,n.exports),n.exports}var s=new Error("Cannot find module '"+e+"'");throw s.code="MODULE_NOT_FOUND",s}).register=function(e,t){r[e]=t},t.parcelRequirecc54=n);var s=n("7qsnY"),o=n("20LS2"),a=n("6gELa"),l=n("kPMpK"),h=n("3hQzq"),u=n("610XN"),d=n("l9IGS"),g=n("2zf1Y"),c=n("5Revz"),f=n("31ZqB"),_=n("eHnTw"),m=n("iTTi2"),p=n("cw4dl"),y=n("iGyOD"),v=n("7h13W"),x=n("j2K3b"),C=n("pMeEw"),E=n("9iujS"),F=n("gKdkP"),S=(u=n("610XN"),o=n("20LS2"),n("btuox")),w=n("jZquI"),M=n("d1ltq"),P=(d=n("l9IGS"),n("kBSVF")),T=n("cgPpQ"),b=n("gzr8q"),G=n("lVQul");const B=[0,0,0,0],L=[],U="modifystart",A="modifyend";class V extends m.default{constructor(e,t,i){super(e),this.features=t,this.mapBrowserEvent=i}}class D extends C.default{constructor(e){let t;if(super(e),this.on,this.once,this.un,this.boundHandleFeatureChange_=this.handleFeatureChange_.bind(this),this.condition_=e.condition?e.condition:S.primaryAction,this.defaultDeleteCondition_=function(e){return(0,S.altKeyOnly)(e)&&(0,S.singleClick)(e)},this.deleteCondition_=e.deleteCondition?e.deleteCondition:this.defaultDeleteCondition_,this.insertVertexCondition_=e.insertVertexCondition?e.insertVertexCondition:S.always,this.vertexFeature_=null,this.vertexSegments_=null,this.lastPixel_=[0,0],this.ignoreNextSingleClick_=!1,this.featuresBeingModified_=null,this.rBush_=new(0,E.default),this.pixelTolerance_=void 0!==e.pixelTolerance?e.pixelTolerance:10,this.snappedToVertex_=!1,this.changingFeature_=!1,this.dragSegments_=[],this.overlay_=new(0,u.default)({source:new(0,o.default)({useSpatialIndex:!1,wrapX:!!e.wrapX}),style:e.style?e.style:k(),updateWhileAnimating:!0,updateWhileInteracting:!0}),this.SEGMENT_WRITERS_={Point:this.writePointGeometry_.bind(this),LineString:this.writeLineStringGeometry_.bind(this),LinearRing:this.writeLineStringGeometry_.bind(this),Polygon:this.writePolygonGeometry_.bind(this),MultiPoint:this.writeMultiPointGeometry_.bind(this),MultiLineString:this.writeMultiLineStringGeometry_.bind(this),MultiPolygon:this.writeMultiPolygonGeometry_.bind(this),Circle:this.writeCircleGeometry_.bind(this),GeometryCollection:this.writeGeometryCollectionGeometry_.bind(this)},this.source_=null,this.hitDetection_=null,e.features?t=e.features:e.source&&(this.source_=e.source,t=new(0,f.default)(this.source_.getFeatures()),this.source_.addEventListener(F.default.ADDFEATURE,this.handleSourceAdd_.bind(this)),this.source_.addEventListener(F.default.REMOVEFEATURE,this.handleSourceRemove_.bind(this))),!t)throw new Error("The modify interaction requires features, a source or a layer");e.hitDetection&&(this.hitDetection_=e.hitDetection),this.features_=t,this.features_.forEach(this.addFeature_.bind(this)),this.features_.addEventListener(_.default.ADD,this.handleFeatureAdd_.bind(this)),this.features_.addEventListener(_.default.REMOVE,this.handleFeatureRemove_.bind(this)),this.lastPointerEvent_=null,this.delta_=[0,0],this.snapToPointer_=void 0===e.snapToPointer?!this.hitDetection_:e.snapToPointer}addFeature_(e){const t=e.getGeometry();if(t){const i=this.SEGMENT_WRITERS_[t.getType()];i&&i(e,t)}const i=this.getMap();i&&i.isRendered()&&this.getActive()&&this.handlePointerAtPixel_(this.lastPixel_,i),e.addEventListener(p.default.CHANGE,this.boundHandleFeatureChange_)}willModifyFeatures_(e,t){if(!this.featuresBeingModified_){this.featuresBeingModified_=new(0,f.default);const i=this.featuresBeingModified_.getArray();for(let e=0,r=t.length;e<r;++e){const r=t[e];for(let e=0,t=r.length;e<t;++e){const t=r[e].feature;t&&!i.includes(t)&&this.featuresBeingModified_.push(t)}}0===this.featuresBeingModified_.getLength()?this.featuresBeingModified_=null:this.dispatchEvent(new V(U,this.featuresBeingModified_,e))}}removeFeature_(e){this.removeFeatureSegmentData_(e),this.vertexFeature_&&0===this.features_.getLength()&&(this.overlay_.getSource().removeFeature(this.vertexFeature_),this.vertexFeature_=null),e.removeEventListener(p.default.CHANGE,this.boundHandleFeatureChange_)}removeFeatureSegmentData_(e){const t=this.rBush_,i=[];t.forEach((function(t){e===t.feature&&i.push(t)}));for(let e=i.length-1;e>=0;--e){const r=i[e];for(let e=this.dragSegments_.length-1;e>=0;--e)this.dragSegments_[e][0]===r&&this.dragSegments_.splice(e,1);t.remove(r)}}setActive(e){this.vertexFeature_&&!e&&(this.overlay_.getSource().removeFeature(this.vertexFeature_),this.vertexFeature_=null),super.setActive(e)}setMap(e){this.overlay_.setMap(e),super.setMap(e)}getOverlay(){return this.overlay_}handleSourceAdd_(e){e.feature&&this.features_.push(e.feature)}handleSourceRemove_(e){e.feature&&this.features_.remove(e.feature)}handleFeatureAdd_(e){this.addFeature_(e.element)}handleFeatureChange_(e){if(!this.changingFeature_){const t=e.target;this.removeFeature_(t),this.addFeature_(t)}}handleFeatureRemove_(e){this.removeFeature_(e.element)}writePointGeometry_(e,t){const i=t.getCoordinates(),r={feature:e,geometry:t,segment:[i,i]};this.rBush_.insert(t.getExtent(),r)}writeMultiPointGeometry_(e,t){const i=t.getCoordinates();for(let r=0,n=i.length;r<n;++r){const n=i[r],s={feature:e,geometry:t,depth:[r],index:r,segment:[n,n]};this.rBush_.insert(t.getExtent(),s)}}writeLineStringGeometry_(e,t){const i=t.getCoordinates();for(let r=0,n=i.length-1;r<n;++r){const n=i.slice(r,r+2),s={feature:e,geometry:t,index:r,segment:n};this.rBush_.insert((0,w.boundingExtent)(n),s)}}writeMultiLineStringGeometry_(e,t){const i=t.getCoordinates();for(let r=0,n=i.length;r<n;++r){const n=i[r];for(let i=0,s=n.length-1;i<s;++i){const s=n.slice(i,i+2),o={feature:e,geometry:t,depth:[r],index:i,segment:s};this.rBush_.insert((0,w.boundingExtent)(s),o)}}}writePolygonGeometry_(e,t){const i=t.getCoordinates();for(let r=0,n=i.length;r<n;++r){const n=i[r];for(let i=0,s=n.length-1;i<s;++i){const s=n.slice(i,i+2),o={feature:e,geometry:t,depth:[r],index:i,segment:s};this.rBush_.insert((0,w.boundingExtent)(s),o)}}}writeMultiPolygonGeometry_(e,t){const i=t.getCoordinates();for(let r=0,n=i.length;r<n;++r){const n=i[r];for(let i=0,s=n.length;i<s;++i){const s=n[i];for(let n=0,o=s.length-1;n<o;++n){const o=s.slice(n,n+2),a={feature:e,geometry:t,depth:[i,r],index:n,segment:o};this.rBush_.insert((0,w.boundingExtent)(o),a)}}}}writeCircleGeometry_(e,t){const i=t.getCenter(),r={feature:e,geometry:t,index:0,segment:[i,i]},n={feature:e,geometry:t,index:1,segment:[i,i]},s=[r,n];r.featureSegments=s,n.featureSegments=s,this.rBush_.insert((0,w.createOrUpdateFromCoordinate)(i),r);let o=t;const a=(0,b.getUserProjection)();if(a&&this.getMap()){const e=this.getMap().getView().getProjection();o=o.clone().transform(a,e),o=(0,T.fromCircle)(o).transform(e,a)}this.rBush_.insert(o.getExtent(),n)}writeGeometryCollectionGeometry_(e,t){const i=t.getGeometriesArray();for(let t=0;t<i.length;++t){const r=i[t];(0,this.SEGMENT_WRITERS_[r.getType()])(e,r)}}createOrUpdateVertexFeature_(e,t,i){let r=this.vertexFeature_;if(r){r.getGeometry().setCoordinates(e)}else r=new(0,y.default)(new(0,x.default)(e)),this.vertexFeature_=r,this.overlay_.getSource().addFeature(r);return r.set("features",t),r.set("geometries",i),r}handleEvent(e){if(!e.originalEvent)return!0;let t;return this.lastPointerEvent_=e,e.map.getView().getInteracting()||e.type!=v.default.POINTERMOVE||this.handlingDownUpSequence||this.handlePointerMove_(e),this.vertexFeature_&&this.deleteCondition_(e)&&(t=!(e.type!=v.default.SINGLECLICK||!this.ignoreNextSingleClick_)||this.removePoint()),e.type==v.default.SINGLECLICK&&(this.ignoreNextSingleClick_=!1),super.handleEvent(e)&&!t}handleDragEvent(e){this.ignoreNextSingleClick_=!1,this.willModifyFeatures_(e,this.dragSegments_);const t=[e.coordinate[0]+this.delta_[0],e.coordinate[1]+this.delta_[1]],i=[],r=[];for(let n=0,s=this.dragSegments_.length;n<s;++n){const s=this.dragSegments_[n],o=s[0],a=o.feature;i.includes(a)||i.push(a);const l=o.geometry;r.includes(l)||r.push(l);const h=o.depth;let u;const d=o.segment,g=s[1];for(;t.length<l.getStride();)t.push(d[g][t.length]);switch(l.getType()){case"Point":u=t,d[0]=t,d[1]=t;break;case"MultiPoint":u=l.getCoordinates(),u[o.index]=t,d[0]=t,d[1]=t;break;case"LineString":u=l.getCoordinates(),u[o.index+g]=t,d[g]=t;break;case"MultiLineString":case"Polygon":u=l.getCoordinates(),u[h[0]][o.index+g]=t,d[g]=t;break;case"MultiPolygon":u=l.getCoordinates(),u[h[1]][h[0]][o.index+g]=t,d[g]=t;break;case"Circle":if(d[0]=t,d[1]=t,0===o.index)this.changingFeature_=!0,l.setCenter(t),this.changingFeature_=!1;else{this.changingFeature_=!0;const i=e.map.getView().getProjection();let r=(0,M.distance)((0,b.fromUserCoordinate)(l.getCenter(),i),(0,b.fromUserCoordinate)(t,i));const n=(0,b.getUserProjection)();if(n){const e=l.clone().transform(n,i);e.setRadius(r),r=e.transform(i,n).getRadius()}l.setRadius(r),this.changingFeature_=!1}}u&&this.setGeometryCoordinates_(l,u)}this.createOrUpdateVertexFeature_(t,i,r)}handleDownEvent(e){if(!this.condition_(e))return!1;const t=e.coordinate;this.handlePointerAtPixel_(e.pixel,e.map,t),this.dragSegments_.length=0,this.featuresBeingModified_=null;const i=this.vertexFeature_;if(i){const r=e.map.getView().getProjection(),n=[],s=i.getGeometry().getCoordinates(),o=(0,w.boundingExtent)([s]),a=this.rBush_.getInExtent(o),l={};a.sort(R);for(let i=0,o=a.length;i<o;++i){const o=a[i],h=o.segment;let u=(0,G.getUid)(o.geometry);const d=o.depth;if(d&&(u+="-"+d.join("-")),l[u]||(l[u]=new Array(2)),"Circle"!==o.geometry.getType()||1!==o.index)if(!(0,M.equals)(h[0],s)||l[u][0])if(!(0,M.equals)(h[1],s)||l[u][1])(0,G.getUid)(h)in this.vertexSegments_&&!l[u][0]&&!l[u][1]&&this.insertVertexCondition_(e)&&n.push(o);else{if(l[u][0]&&0===l[u][0].index){let e=o.geometry.getCoordinates();switch(o.geometry.getType()){case"LineString":case"MultiLineString":continue;case"MultiPolygon":e=e[d[1]];case"Polygon":if(o.index!==e[d[0]].length-2)continue}}this.dragSegments_.push([o,1]),l[u][1]=o}else this.dragSegments_.push([o,0]),l[u][0]=o;else{const e=I(t,o,r);(0,M.equals)(e,s)&&!l[u][0]&&(this.dragSegments_.push([o,0]),l[u][0]=o)}}n.length&&this.willModifyFeatures_(e,[n]);for(let e=n.length-1;e>=0;--e)this.insertVertex_(n[e],s)}return!!this.vertexFeature_}handleUpEvent(e){for(let t=this.dragSegments_.length-1;t>=0;--t){const i=this.dragSegments_[t][0],r=i.geometry;if("Circle"===r.getType()){const t=r.getCenter(),n=i.featureSegments[0],s=i.featureSegments[1];n.segment[0]=t,n.segment[1]=t,s.segment[0]=t,s.segment[1]=t,this.rBush_.update((0,w.createOrUpdateFromCoordinate)(t),n);let o=r;const a=(0,b.getUserProjection)();if(a){const t=e.map.getView().getProjection();o=o.clone().transform(a,t),o=(0,T.fromCircle)(o).transform(t,a)}this.rBush_.update(o.getExtent(),s)}else this.rBush_.update((0,w.boundingExtent)(i.segment),i)}return this.featuresBeingModified_&&(this.dispatchEvent(new V(A,this.featuresBeingModified_,e)),this.featuresBeingModified_=null),!1}handlePointerMove_(e){this.lastPixel_=e.pixel,this.handlePointerAtPixel_(e.pixel,e.map,e.coordinate)}handlePointerAtPixel_(e,t,i){const r=i||t.getCoordinateFromPixel(e),n=t.getView().getProjection(),s=function(e,t){return q(r,e,n)-q(r,t,n)};let o,a;if(this.hitDetection_){const i="object"==typeof this.hitDetection_?e=>e===this.hitDetection_:void 0;t.forEachFeatureAtPixel(e,((e,t,i)=>{if("Point"===(i=i||e.getGeometry()).getType()&&this.features_.getArray().includes(e)){a=i;const t=i.getFlatCoordinates().slice(0,2);o=[{feature:e,geometry:i,segment:[t,t]}]}return!0}),{layerFilter:i})}if(!o){const e=(0,b.fromUserExtent)((0,w.createOrUpdateFromCoordinate)(r,B),n),i=t.getView().getResolution()*this.pixelTolerance_,s=(0,b.toUserExtent)((0,w.buffer)(e,i,B),n);o=this.rBush_.getInExtent(s)}if(o&&o.length>0){const i=o.sort(s)[0],l=i.segment;let h=I(r,i,n);const u=t.getPixelFromCoordinate(h);let d=(0,M.distance)(e,u);if(a||d<=this.pixelTolerance_){const e={};if(e[(0,G.getUid)(l)]=!0,this.snapToPointer_||(this.delta_[0]=h[0]-r[0],this.delta_[1]=h[1]-r[1]),"Circle"===i.geometry.getType()&&1===i.index)this.snappedToVertex_=!0,this.createOrUpdateVertexFeature_(h,[i.feature],[i.geometry]);else{const r=t.getPixelFromCoordinate(l[0]),n=t.getPixelFromCoordinate(l[1]),s=(0,M.squaredDistance)(u,r),a=(0,M.squaredDistance)(u,n);d=Math.sqrt(Math.min(s,a)),this.snappedToVertex_=d<=this.pixelTolerance_,this.snappedToVertex_&&(h=s>a?l[1]:l[0]),this.createOrUpdateVertexFeature_(h,[i.feature],[i.geometry]);const g={};g[(0,G.getUid)(i.geometry)]=!0;for(let t=1,i=o.length;t<i;++t){const i=o[t].segment;if(!((0,M.equals)(l[0],i[0])&&(0,M.equals)(l[1],i[1])||(0,M.equals)(l[0],i[1])&&(0,M.equals)(l[1],i[0])))break;{const r=(0,G.getUid)(o[t].geometry);r in g||(g[r]=!0,e[(0,G.getUid)(i)]=!0)}}}return void(this.vertexSegments_=e)}}this.vertexFeature_&&(this.overlay_.getSource().removeFeature(this.vertexFeature_),this.vertexFeature_=null)}insertVertex_(e,t){const i=e.segment,r=e.feature,n=e.geometry,s=e.depth,o=e.index;let a;for(;t.length<n.getStride();)t.push(0);switch(n.getType()){case"MultiLineString":case"Polygon":a=n.getCoordinates(),a[s[0]].splice(o+1,0,t);break;case"MultiPolygon":a=n.getCoordinates(),a[s[1]][s[0]].splice(o+1,0,t);break;case"LineString":a=n.getCoordinates(),a.splice(o+1,0,t);break;default:return}this.setGeometryCoordinates_(n,a);const l=this.rBush_;l.remove(e),this.updateSegmentIndices_(n,o,s,1);const h={segment:[i[0],t],feature:r,geometry:n,depth:s,index:o};l.insert((0,w.boundingExtent)(h.segment),h),this.dragSegments_.push([h,1]);const u={segment:[t,i[1]],feature:r,geometry:n,depth:s,index:o+1};l.insert((0,w.boundingExtent)(u.segment),u),this.dragSegments_.push([u,0]),this.ignoreNextSingleClick_=!0}removePoint(){if(this.lastPointerEvent_&&this.lastPointerEvent_.type!=v.default.POINTERDRAG){const e=this.lastPointerEvent_;this.willModifyFeatures_(e,this.dragSegments_);const t=this.removeVertex_();return this.featuresBeingModified_&&this.dispatchEvent(new V(A,this.featuresBeingModified_,e)),this.featuresBeingModified_=null,t}return!1}removeVertex_(){const e=this.dragSegments_,t={};let i,r,n,s,o,a,l,h,u,d,g,c=!1;for(o=e.length-1;o>=0;--o)n=e[o],d=n[0],g=(0,G.getUid)(d.feature),d.depth&&(g+="-"+d.depth.join("-")),g in t||(t[g]={}),0===n[1]?(t[g].right=d,t[g].index=d.index):1==n[1]&&(t[g].left=d,t[g].index=d.index+1);for(g in t){switch(u=t[g].right,l=t[g].left,a=t[g].index,h=a-1,d=void 0!==l?l:u,h<0&&(h=0),s=d.geometry,r=s.getCoordinates(),i=r,c=!1,s.getType()){case"MultiLineString":r[d.depth[0]].length>2&&(r[d.depth[0]].splice(a,1),c=!0);break;case"LineString":r.length>2&&(r.splice(a,1),c=!0);break;case"MultiPolygon":i=i[d.depth[1]];case"Polygon":i=i[d.depth[0]],i.length>4&&(a==i.length-1&&(a=0),i.splice(a,1),c=!0,0===a&&(i.pop(),i.push(i[0]),h=i.length-1))}if(c){this.setGeometryCoordinates_(s,r);const t=[];if(void 0!==l&&(this.rBush_.remove(l),t.push(l.segment[0])),void 0!==u&&(this.rBush_.remove(u),t.push(u.segment[1])),void 0!==l&&void 0!==u){const e={depth:d.depth,feature:d.feature,geometry:d.geometry,index:h,segment:t};this.rBush_.insert((0,w.boundingExtent)(e.segment),e)}this.updateSegmentIndices_(s,a,d.depth,-1),this.vertexFeature_&&(this.overlay_.getSource().removeFeature(this.vertexFeature_),this.vertexFeature_=null),e.length=0}}return c}setGeometryCoordinates_(e,t){this.changingFeature_=!0,e.setCoordinates(t),this.changingFeature_=!1}updateSegmentIndices_(e,t,i,r){this.rBush_.forEachInExtent(e.getExtent(),(function(n){n.geometry===e&&(void 0===i||void 0===n.depth||(0,P.equals)(n.depth,i))&&n.index>t&&(n.index+=r)}))}}function R(e,t){return e.index-t.index}function q(e,t,i){const r=t.geometry;if("Circle"===r.getType()){let n=r;if(1===t.index){const t=(0,b.getUserProjection)();t&&(n=n.clone().transform(t,i));const r=(0,M.squaredDistance)(n.getCenter(),(0,b.fromUserCoordinate)(e,i)),s=Math.sqrt(r)-n.getRadius();return s*s}}const n=(0,b.fromUserCoordinate)(e,i);return L[0]=(0,b.fromUserCoordinate)(t.segment[0],i),L[1]=(0,b.fromUserCoordinate)(t.segment[1],i),(0,M.squaredDistanceToSegment)(n,L)}function I(e,t,i){const r=t.geometry;if("Circle"===r.getType()&&1===t.index){let t=r;const n=(0,b.getUserProjection)();return n&&(t=t.clone().transform(n,i)),(0,b.toUserCoordinate)(t.getClosestPoint((0,b.fromUserCoordinate)(e,i)),i)}const n=(0,b.fromUserCoordinate)(e,i);return L[0]=(0,b.fromUserCoordinate)(t.segment[0],i),L[1]=(0,b.fromUserCoordinate)(t.segment[1],i),(0,b.toUserCoordinate)((0,M.closestOnSegment)(n,L),i)}function k(){const e=(0,d.createEditingStyle)();return function(t,i){return e.Point}}var O=D,N=n("7lBr2"),j=class extends N.default{constructor(e){e||(e=e||{});var t=!1;super({handleEvent:function(r){if(!i.getActive())return!0;switch(r.type){case"pointerdrag":t=!0;break;case"pointerup":t=!1;break;case"pointermove":t||i.handleMove_(r)}return!e.handleEvent||e.handleEvent(r)}});var i=this;this.setLayerFilter(e.layerFilter),e.layers&&e.layers.length&&this.setLayerFilter((function(t){return e.layers.indexOf(t)>=0})),this.setFeatureFilter(e.featureFilter),this.set("hitTolerance",e.hitTolerance),this.setCursor(e.cursor)}setMap(e){void 0!==this.previousCursor_&&this.getMap()&&(this.getMap().getTargetElement().style.cursor=this.previousCursor_,this.previousCursor_=void 0),super.setMap(e)}setActive(e){if(super.setActive(e),this.cursor_&&this.getMap()&&this.getMap().getTargetElement()){var t=this.getMap().getTargetElement().style;void 0!==this.previousCursor_&&(t.cursor=this.previousCursor_,this.previousCursor_=void 0)}}setCursor(e){!e&&void 0!==this.previousCursor_&&this.getMap()&&(this.getMap().getTargetElement().style.cursor=this.previousCursor_,this.previousCursor_=void 0),this.cursor_=e}setFeatureFilter(e){this.featureFilter_="function"==typeof e?e:function(){return!0}}setLayerFilter(e){this.layerFilter_="function"==typeof e?e:function(){return!0}}handleMove_(e){var t=this.getMap();if(t){var i,r,n=this,s=t.forEachFeatureAtPixel(e.pixel,(function(e,t){return n.featureFilter_.call(null,e,t)?(i=e,r=t,!0):(i=r=null,!1)}),{hitTolerance:this.get("hitTolerance"),layerFilter:n.layerFilter_});if(s&&this.dispatchEvent({type:"hover",feature:i,layer:r,coordinate:e.coordinate,pixel:e.pixel,map:e.map,originalEvent:e.originalEvent,dragging:e.dragging}),this.feature_===i&&this.layer_===r||(this.feature_=i,this.layer_=r,i?this.dispatchEvent({type:"enter",feature:i,layer:r,coordinate:e.coordinate,pixel:e.pixel,map:e.map,originalEvent:e.originalEvent,dragging:e.dragging}):this.dispatchEvent({type:"leave",coordinate:e.coordinate,pixel:e.pixel,map:e.map,originalEvent:e.originalEvent,dragging:e.dragging})),this.cursor_){var o=t.getTargetElement().style;s?o.cursor!=this.cursor_&&(this.previousCursor_=o.cursor,o.cursor=this.cursor_):void 0!==this.previousCursor_&&(o.cursor=this.previousCursor_,this.previousCursor_=void 0)}}}},H=n("1B70O");(0,n("jZUWm").default)(e('<div> <h2> Day 14: hexagons </h2> <p> Use <a href="http://viglino.github.io/ol-ext/doc/doc-pages/ol.style.FlowLine.html" target="_new"> ol-ext Hexbin source </a> to aggregate data on hexagons. </p> </div>')),H.default.getView().setZoom(13),H.default.getView().setCenter([259982,6250835]);const W=new(0,a.default)({layer:"GEOGRAPHICALGRIDSYSTEMS.PLANIGNV2"});H.default.addLayer(W);const K=new(0,s.default)({source:new(0,o.default)({url:"./paris-photo.geojson",format:new(0,l.default),attributions:["<a href='https://twitter.com/search?q=paris%20autrefois%20%28from%3ASamuelMartin75%29&src=typed_query&f=live'>@SamuelMartin</a>"]})}),z=new(0,h.default)({source:K.getSource(),size:500}),X=new(0,u.default)({title:"Bin",className:"bin",source:z,style:e=>{const t=[0,170,255,e.get("features").length/10+.11];return new(0,d.default)({fill:new(0,g.default)({color:t})})}});X.addFilter(new(0,c.default)({blend:"multiply"})),H.default.addLayer(X),H.default.addLayer(K);const Z=new O({source:z.getSource()});H.default.addInteraction(Z),H.default.addInteraction(new j({layers:[K],cursor:"move"}));